<?php

/**
 * @file
 * Views hook implementations for the Config Entities.
 */

use Drupal\config_view\Form\ConfigViewHelper;

/**
 * Implements hook_views_data().
 */
function config_view_views_data() {
  $data = [];
  $config_entities = ConfigViewHelper::getConfigEntities();

  if (!empty($config_entities)) {

    foreach ($config_entities as $id => $conf) {

      if ($conf !== 0) {
        try {
          // Fill in base data.
          $name = ConfigViewHelper::getConfigLabel($id);
          $table = &$data[$id];
          $table['table']['group'] = $name;
          $table['table']['provider'] = $id;
          $fields = ConfigViewHelper::getMapping($id);

          $table['table']['base'] = [
            'field' => strtolower($fields['id']['label']),
            'index' => strtolower($fields['id']['label']),
            'title' => $name,
            'help' => t('Use the ConfigEntity @name to view the data.', ['@name' => $name]),
            'query_id' => 'config_view_query',
          ];

          // Dynamically adding suitable handlers for all indexed fields.
          foreach ($fields as $key => $value) {
            if (isset($value['label']) && isset($value['type'])) {
              $properties = ConfigViewHelper::getFieldParameters($value);

              if (!empty($properties)) {
                $table[$key] = [
                  'title' => $value['label'],
                  'help' => $value['label'],
                  'field' => [
                    'id' => $properties['field'],
                    'click sortable' => FALSE,
                  ],
                  'filter' => [
                    'id' => $properties['filter'],
                    'handler' => $properties['filter'],
                    'allow empty' => TRUE,
                  ],
                  'sort' => ['id' => 'standard'],
                  'argument' => ['id' => $properties['argument']],
                ];
              }
            }
          }
        }
        catch (\Exception $e) {
          $args = ['%entity' => $name];
          watchdog_exception($key, $e, '%type while computing Views data for entity: %entity.', $args);
        }
      }
    }
  }
  return array_filter($data);
}

/**
 * Implements hook_help().
 */
function config_view_help($path, $arg) {
  switch ($path) {
    case 'help.page.config_view':

      $filepath = drupal_get_path('module', 'config_view') . '/README.md';

      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }

      if (!isset($readme)) {
        return NULL;
      }

      return '<pre>' . $readme . '</pre>';
  }
}
